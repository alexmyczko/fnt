#!/usr/bin/env bash
# vim: autoindent noexpandtab
set -e
#set -x

# APT but only for fonts
# alex@aiei.ch
# christopher@bocki.com

# Defaults
BASE=${XDG_DATA_HOME:-"$HOME/.local/share"}
TARGET="$BASE/fonts"
FNTDATA="$BASE/fnt"
# Fallback if ~/.local/share doesn't exist as if fnt would be the first program
# writing to it... HAH!
if ! test -d "$BASE"; then
	BASE="$HOME"
	TARGET="$BASE/.fonts"
	FNTDATA="$BASE/.fnt"
fi
FNTINDEXDIR="$FNTDATA/index"
PACKAGES="$FNTDATA/Packages.xz"
APACHE="$FNTDATA/APACHE.xz"
OFL="$FNTDATA/OFL.xz"
MIRROR="https://deb.debian.org/debian"
INDEX="$MIRROR/dists/sid/main/binary-all/Packages.xz"
GMIRROR="https://sid.ethz.ch/debian/google-fonts"
APACHEINDEX="$GMIRROR/APACHE.xz"
OFLINDEX="$GMIRROR/OFL.xz"
if [ ! -d "$FNTDATA" ] || [ ! -d "$FNTINDEXDIR" ]; then
	mkdir -p "$FNTINDEXDIR" || { echo "Couldn't create cache+index directory: $FNTDATA + /index" ; exit 1 ; }
fi

if ! command -v uname &>/dev/null; then
	s="Windows"
else
	s=$(uname -s)
fi

# Pipelines
pipe_download(){
	local PIPEFILE
	PIPEDIR="$(mktemp -d)"
	PIPEFILE="${1%%*/}"
	if test -z "${PIPEFILE}"; then PIPEFILE=index; fi
	chmod go-rwx "${PIPEDIR}"
	trap 'rm -rf -- "$PIPEDIR"' EXIT
	download "$1" "$PIPEDIR/$PIPEFILE"
	cat "$PIPEDIR/$PIPEFILE"
}

search() {
	if [ -r "$PACKAGES" ] && [ -r "$APACHE" ] && [ -r "$OFL" ]; then
		xzcat "${PACKAGES}" | awk '/^Package: fonts-.*'"$1"'.*/ {gsub(/^Package: /,"");print;}'
		xzcat "${APACHE}" "${OFL}" | awk '/^Package: .*'"$1"'.*/ {gsub(/^/, "google-", $2); print $2}'
	else
		echo "Can't find any Data, please run "${BASH_SOURCE[0]}" update and try again."
	fi
}

download() {
	# shellcheck disable=SC2086
	local URL LOPTS
	URL="$1"
	if test -z "${1##*.deb}"; then
		if /usr/bin/which /usr/lib/apt/apt-helper>/dev/null
		then
			# Test if we could use an local apt-proxy (non-ssl) but no worry we do
			# md5sum checking on the file anyway.
			PROXYURL=${URL/https:/http:}
			if test -n "$(/usr/lib/apt/apt-helper auto-detect-proxy "$PROXYURL" |
				awk -F\' '{print $2}')"; then
				URL=$PROXYURL;
			fi
			# shellcheck disable=SC2090,SC2086
			/usr/lib/apt/apt-helper $LOPTS download-file "$URL" "$2" >/dev/null
			return
		fi
	fi
	if /usr/bin/which fetch>/dev/null
	then
		fetch -q -o "$2" "$URL"
	elif /usr/bin/which curl>/dev/null
	then
		curl -g -L -s -o "$2" "$URL"
	elif /usr/bin/which wget>/dev/null
	then
		wget -q -O "$URL" "$2"
	else
		print "ERROR: neither apt-helper, wget, curl nor fetch is installed" >&2
		exit 70
	fi
}

deb_handler() {
	# retrieve font from debian mirror and store infos for removal
	TMPDIR="$(mktemp -d)"
	chmod go-rwx "${TMPDIR}"
	trap 'rm -rf -- "$TMPDIR"' EXIT
	PIT="${TMPDIR}/extract"
	mkdir -m go-rwx "${PIT}" || { echo "Couldn't eat tartar." ; exit 1 ; }
	NAME="$1"
	INFOS="$(unxz -c "${PACKAGES}" | awk "/^Package: ${NAME}$/,/^$/" | awk '/^(Version|Installed-Size|Filename|Size|MD5sum): /')"
	VER="$(awk '/^Version: /{print$2}' <<< "$INFOS")"
	INSTSIZE="$(awk '/^Installed-Size: /{print$2}' <<< "$INFOS")"
	DOWNSIZE="$(awk '/^Size: /{print$2}' <<< "$INFOS")"
	FPATH="$(awk '/^Filename: /{print$2}' <<< "$INFOS")"
	FNAME="$(basename "$FPATH")"
	MD5SUM="$(awk '/^MD5sum: /{print$2}' <<< "$INFOS") ${FNAME}"
	echo "Installing ${NAME} ${VER} [${DOWNSIZE} ${INSTSIZE}000 ${MIRROR}/${FPATH}]..."
	cd "${TMPDIR}" || { echo "Couldn't cd into ${TMPDIR}" ; exit 1 ; }
	test -z "$(download "${MIRROR}/${FPATH}" "${TMPDIR}/$FNAME")" || { echo "Couldn't retrieve file." ; exit 1 ; }
	echo "${MD5SUM}" > "${TMPDIR}/${FNAME}.md5"
	if ${md5} -c "${TMPDIR}/${FNAME}.md5" >/dev/null; then
		# deb data
		DATA="$(ar t "$TMPDIR/$FNAME" | grep '^data\.tar')"
		mkdir -p "${PIT}/data" && cd "${PIT}/data"
		ar x "${TMPDIR}/$FNAME" "$DATA"
		tar xf "${PIT}/data/$DATA"
		find "${PIT}/data" -name "*.?tf" -exec cp {} "$TARGET" \;
		# deb control
		CONTROL="$(ar t "$TMPDIR/$FNAME" | grep '^control\.tar')"
		mkdir -p "${PIT}/control" && cd "${PIT}/control"
		ar x "${TMPDIR}/$FNAME" "$CONTROL"
		tar xf "${PIT}/control/$CONTROL"
		sed -n 's/^\(.*\) .*\/\(.*tf$\)/\1 \2/p' "${PIT}/control/md5sums" > "$FNTINDEXDIR/$NAME"
	else
		echo "Can't verify md5sum!"
		exit 1
	fi
}

fnt_install() {
	local a o p
	a='' o='' p=''
	if [ ! -f "${PACKAGES}" ]; then
		echo "Could not find ${PACKAGES}"
		echo "Please run ${BASH_SOURCE[0]} update"
		# could also just run itself with update...
		# but apt doesn't do that either :)
		exit 1
	fi
	if [ ! $# -eq 2 ]; then
		echo "No fontname supplied."
		echo "Example: ${BASH_SOURCE[0]} install agave"
		exit 1
	fi
	FNTMATCH=$2
	if [ ! -d "${TARGET}" ]; then
		mkdir -p "${TARGET}"
	fi
	# look for first font match
	p="$(unxz -c "${PACKAGES}" | awk '/^Package: (fonts-)?'"$FNTMATCH"'/ {gsub(/^Package: /,"");print;exit;}')"
	if !  [ -z "$p" ]; then
		deb_handler "$p"
		return
	fi
	FNTMATCH=${FNTMATCH/google-/}
	a="$(unxz -c "${APACHE}" | awk '/Package: '"$FNTMATCH"'$/,/^$/')"
	if ! [ -z "$a" ]; then
		dir="$(awk '/^Directory: /  {print$2}' <<< $a)"
		files="$(awk '/^ .*\.?tf$/ {print $2}' <<< $a)"
		md5sums="$(awk '/^ .*\.?tf$/ {gsub(/^ /,""); print}' <<< $o)"
		for file in $files; do
			download "$GMIRROR/$dir/$file" "$TARGET/$file"
		done
		echo "$md5sums" > "$FNTINDEXDIR/google-${dir##*/}"
		return
	else
		o="$(unxz -c "${OFL}" | awk '/Package: '"$FNTMATCH"'$/,/^$/')"
		if ! [ -z "$o" ]; then
			dir="$(awk '/^Directory: /  {print$2}' <<< $o)"
			files="$(awk '/^ .*\.?tf$/ {print $2}' <<< $o)"
			md5sums="$(awk '/^ .*\.?tf$/ {gsub(/^ /,""); print}' <<< $o)"
			for file in $files; do
				download "$GMIRROR/$dir/$file" "$TARGET/$file"
			done
			echo "$md5sums" > "$FNTINDEXDIR/google-${dir##*/}"
			return
		fi
	fi
}

case "$s" in
	Darwin)
		#echo macOS
		check="curl brew otfinfo chafa"
		# otfinfo comes with lcdf-typetools
		i="brew"
		md5="md5sum"
		TARGET="$HOME/Library/Fonts/"
	;;
	Linux|GNU/kFreeBSD|GNU)
		#echo Linux
		check="curl chafa otfinfo"
		i="apt"
		md5="md5sum"
#		TARGET="$HOME/.fonts/"
		if [ 0 -eq "$(id -u)" ]; then
			TARGET="/usr/local/share/fonts/"
		fi
	;;
	FreeBSD)
		#echo FreeBSD
		check="curl chafa otfinfo"
		i="pkg"
		md5="md5"
		TARGET="$HOME/.fonts"
		FNTDATA="$HOME/.fnt"
	;;
	OpenBSD)
		#echo OpenBSD
		check="curl chafa otfinfo"
		i="pkg_add"
		md5="md5"
		#TARGET="$HOME/.local/share/fonts"
	;;
	Haiku)
		#echo Haiku OS
		check="curl"
		i="pkgman"
		TARGET="$HOME/config/non-packaged/data/fonts"
		FNTDATA="$HOME/.fnt"
	;;
	Windows)
		#echo Windows
		check="cmd.exe"
		i="ENOPKGMANAGER"
		TARGET="$USERPROFILE\\Fonts"
	;;
	*)
		echo "Please report $s to https://github.com/alexmyczko/fnt/issues"
		exit 1
	;;
esac

for a in $check; do
	if ! command -v "$a" &>/dev/null; then
		echo "$a not found, please use $i to install it."
		exit 1
	fi
done

case "$1" in
	help|-h)
		cat << 'EOF'
Syntax: fnt [ update | list [indexfile]| info | help ]
        fnt [ install | remove | preview | search ] font

update|-u  updates the font package index of debian sid
list|-l    lists installed fonts with glyphcount per font
info       information about how many fonts can be installed and are available
help|-h    this help
install|-i install a font
remove|-r  remove a font
preview|-p preview a font
search|-s  search for font
EOF
	;;

	update|-u)
		echo -n "Updating..."
		mkdir -p "${FNTDATA}/index" && rm -rf "$PACKAGES" "$APACHE" "$OFL"
		PACKAGESTMP=$(mktemp)
		download "$INDEX" "${PACKAGESTMP}" 
		xzcat "${PACKAGESTMP}" | awk '/^Package: fonts-/,/^$/' > "${PACKAGES%.xz}";
		xz "${PACKAGES%.xz}" ; rm "${PACKAGESTMP}" ; echo -n " ${PACKAGES##*/}... "
		download "$APACHEINDEX" "$APACHE"; echo -n " ${APACHE##*/}.. "
		download "$OFLINDEX" "$OFL"; echo -n " ${OFL##*/}.. "
		echo -n -e "done!\n"
	;;

	info)
		echo "Information..."
		mkdir -p "$FNTINDEXDIR"
		INSTALLEDFONTS=$(find "$FNTINDEXDIR" -maxdepth 1 -type f |
			awk -F/ '{print $NF}')
					ALLFONTS=$(${BASH_SOURCE[0]} search)
		printf 'Installed:\tDebian: %i\tGoogle: %i\n' \
			"$(grep -c '^fonts-' <<< "$INSTALLEDFONTS")" \
			"$(grep -c '^google-' <<< "$INSTALLEDFONTS")"
		printf 'Available:\tDebian: %i\tGoogle: %i\n' \
			"$(grep -c '^fonts-' <<< "$ALLFONTS")" \
			"$(grep -c '^google-' <<< "$ALLFONTS")"
	;;

	list|-l)
		if [ $# -eq 1 ]; then
			find "$TARGET" /usr/local/share/fonts -iname '*.?tf' 2>/dev/null |
				sort | while read -r f; do
					IDX=$(basename "$(grep -rl "$(basename "$f")" "$FNTINDEXDIR")")
					if test -z "$IDX"; then IDX=NOT-MANAGED-BY-FNT; fi
					echo "$IDX: $(basename "${f}") [$(otfinfo -u "$f" 2>/dev/null | wc -l)]"
					unset IDX
				done
		fi
		if [ $# -eq 2 ] && [ "$2" = "index" ] ; then
			find "$FNTINDEXDIR" -type f | awk -F'/' '{print $NF}'
		fi
		if [ $# -eq 2 ] && [ -r "$FNTINDEXDIR/$2" ]; then
			# shellcheck disable=SC2046
			find $(awk -v target="$TARGET" \
				'{printf "%s/%s ", target, $2}' "$FNTINDEXDIR/$2") |
				while read -r font; do
					echo "$(basename "${font}") [$(otfinfo -u "$font" 2>/dev/null | wc -l)]"
				done
		fi
	;;
	preview|-p)
		if [ $# -ne 2 ]; then
			echo "No fontname supplied."
			echo "Example: ${BASH_SOURCE[0]} preview agave"
			exit 1
		fi
		mkdir -p "$FNTINDEXDIR"
		rm -f "${FNTDATA}/preview.png"
		PRINTED=
		FNTMATCH="${2/(fonts|google)-/}"
		if download "https://screenshots.debian.net/screenshot/fonts-$FNTMATCH" "${FNTDATA}/preview.png"; then
			# if we get nothing / "this picture is not available" pic
			if [ "$($md5 "${FNTDATA}/preview.png" | awk '{print$1}')" = "b5765b390157e36eaf721c8848a4b04d" ]; then
				if download "https://sid.ethz.ch/fonts/$FNTMATCH/preview.png" "${FNTDATA}/preview.png"; then
					chafa -c 240 -w 9 -O 9 -p on --symbols all "${FNTDATA}/preview.png" 2>/dev/null && PRINTED=1
				fi
			else
				chafa -c 240 -w 9 -O 9 -p on --symbols all "${FNTDATA}/preview.png" 2>/dev/null && PRINTED=1
			fi
		fi
		if [ "$PRINTED" != "1" ]; then
			echo "Couldn't retrieve a preview."
		fi
	;;
	install|-i)
		fnt_install "$@"
	;;
	remove|-r)
		if [ $# -eq 1 ] ; then
			echo "Usage: ${BASH_SOURCE[0]} indexfile"
			echo "To get a list of indexes: ${BASH_SOURCE[0]} list index"
		fi
		if [ $# -eq 2 ] && [ -w "$FNTINDEXDIR/$2" ] ; then
			if [ -e "$FNTINDEXDIR/$2" ]; then
			awk '{print$2}' "$FNTINDEXDIR/$2" |while read -r FONTFILE; do
			${BASH_SOURCE[0]} remove "$2" "$FONTFILE"
		done
		else
			echo "Couldn't find the font $2"
			fi
		rm -fv "${FNTINDEXDIR:?}/$2"
		fi
		if [ $# -eq 3 ] && [ -w "$FNTINDEXDIR/$2" ] && [ -w "$TARGET/$3" ] ; then
			if grep -q "$3" "$FNTINDEXDIR/$2"; then
				rm -fv "${TARGET:?}/${FONT:?}"
			fi
		fi
	;;
	search|-s)
		search "$2"
	;;
	purge)
		if [ $# -eq 1 ] ; then
			echo "This command will remove $TARGET and $FNTDATA!"
			echo -e "If you are certain use:\n\t${BASH_SOURCE[0]} purge yes-i-am-sure"
			echo "You have been warned."
		fi
		if [ $# -eq 2 ] && [ "$2" = "yes-i-am-sure" ] ; then
			rm -Rvf "${TARGET:?}" "${FNTDATA:?}"
		fi
	;;
	moo)
		echo "This fnt does not have cow powers."
	;;
	wak)
		echo ' _()< wak wak'
		echo '(__)'
	;;
	quak)
		cat << 'EOF'
 _______
< QUAK? >
 -------
     \
      \
          oO)-.                       .-(Oo
         /__  _\                     /_  __\
         \  \(  |     ()~()         |  )/  /
          \__|\ |    (-___-)        | /|__/
          '  '--'    ==`-'==        '--'  '
EOF
	;;
	*)
		lolcat=$(command -v cat)
		PATH="/usr/games:$PATH"
		if command -v lolcat>/dev/null; then lolcat=$(command -v lolcat); fi
		$lolcat << 'EOF'
   .d888
  d88P"           888
  888             888
.d88888 888888b. d888888
  888   888 "88b  888
  888   888  888  888
  888   888  888  Y88b.
  888   888  888   "Y888
EOF
	;;
esac
